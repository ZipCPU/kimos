################################################################################
##
## Filename:	autodata/mem_flash_sdram.txt
## {{{
## Project:	KIMOS, a Mercury KX2 demonstration project
##
## Purpose:	Describes a memory model containing nothing more than flash
##		and block RAM.  This will be used to create a board.ld linker
##	script that can be used to link ZipCPU programs.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2024, Gisselquist Technology, LLC
## {{{
## This file is part of the KIMOS project.
##
## The KIMOS project is free software and gateware: you can redistribute it
## and/or modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation, either version 3 of the License,
## or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=mem_flash_sdram
@MASTER.TYPE=SCRIPT
@MASTER.BUS=wbwide
@LD.FILE=board.ld
@LD.DEFNS=
/* LD.DEFNS from zipmaster.txt */
_kram  = ORIGIN(bkram); /* No high-speed kernel RAM */
_ram   = ORIGIN(sdram);
_rom   = ORIGIN(flash);
_top_of_stack = ORIGIN(sdram) + LENGTH(sdram);

@LD.SCRIPT=
/* LD.SCRIPT from zipmaster.txt */
SECTIONS
{
       .rocode @$[0x%08x](zip.RESET_ADDRESS) : ALIGN(4) {
               _boot_address = .;
               *(.start) *(.boot)
               *(.text.startup)
       } > flash
       _kram_start = . ;
       .kernel : ALIGN_WITH_INPUT {
               *(.kernel)
		}> bkram AT> flash
	_kram_end = .;
       _ram_image_start = . ;
       .kernel : ALIGN_WITH_INPUT {
               *(.text*)
               *(.rodata*) *(.strings)
               *(.data) *(COMMON)
               }> sdram AT> flash
       _ram_image_end = . ;
       .bss : ALIGN_WITH_INPUT {
               *(.bss)
               _bss_image_end = . ;
               } > sdram
       _top_of_heap = .;
}
#
