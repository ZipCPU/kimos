################################################################################
##
## Filename:	autodata/allclocks.txt
## {{{
## Project:	KIMOS, a Mercury KX2 demonstration project
##
## Purpose:	Describe how to create the clocks necessary for the design
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2024, Gisselquist Technology, LLC
## {{{
## This file is part of the KIMOS project.
##
## The KIMOS project is free software and gateware: you can redistribute it
## and/or modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation, either version 3 of the License,
## or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory, run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=iclock
@ACCESS=ALLCLOCKS_PRESENT
@CLOCK.NAME=clk
@CLOCK.WIRE=i_clk
@CLOCK.FREQUENCY=100000000
@CLOCK.TOP=i_clk
@BDEFS.DEFN=
#define	CLOCK_FREQUENCY_HZ	@$(CLOCK.iFREQUENCY)
#
#
@PREFIX=masterclk
@TOP.DEFNS=
	// Clock/reset definitions
	// {{{
	wire	s_clk_200mhz,  s_clk_200mhz_unbuffered,
		sysclk_locked, sysclk_feedback,
		s_clk_125mhz,  s_clk_125_unbuffered,
		// s_clk_150mhz	-- needed for SATA
		s_clk_250mhz,  s_clk_250_unbuffered,
		s_clksync,     s_clksync_unbuffered,
		s_clk_400mhz,  s_clk_400mhz_unbuffered,	// Pixclk * 10
		s_clk_40mhz_unbuffered,	// 40MHz
		netclk_locked, netclk_feedback;
	wire	i_clk_buffered;
	wire	clocks_locked;
	reg	[3:0]	sysclk_stable, netclk_stable,
			upper_plls_stable;
	reg	[4:0]	pre_reset_counter;
	reg		pre_reset;
	// }}}
@TOP.PORTLIST=
@TOP.IODECL=
@TOP.MAIN=
		// PLL generated clocks
		s_clk_200mhz, s_clk_125mhz
@TOP.INSERT=
	// Buffer the incoming clock
	BUFG @$(PREFIX)clkbufi(.I(i_clk), .O(i_clk_buffered));

	////////////////////////////////////////////////////////////////////////
	//
	// PLL #1: 100MHz, 200MHz, 400MHz, and 40MHz
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	//

	// But ... the delay controller requires a 200 MHz reference clock,
	// the generic clock generator requires a 400MHz clock and a clock
	// synchronized to it
	PLLE2_BASE #(
		// {{{
		.CLKFBOUT_MULT(8),
		.CLKFBOUT_PHASE(0.0),
		.CLKIN1_PERIOD(10),
		.CLKOUT0_DIVIDE(4),	// 200 MHz
		.CLKOUT1_DIVIDE(2),	// 400 MHz
		.CLKOUT2_DIVIDE(8),	// 100 MHz
		.CLKOUT3_DIVIDE(20)	//  40 MHz
		// }}}
	) gen_sysclk(
		// {{{
		.CLKIN1(i_clk_buffered),
		.CLKOUT0(s_clk_200mhz_unbuffered),
		.CLKOUT1(s_clk_400mhz_unbuffered),
		.CLKOUT2(s_clksync_unbuffered),
		.CLKOUT3(s_clk_40mhz_unbuffered),
		.PWRDWN(1'b0), .RST(1'b0),
		.CLKFBOUT(sysclk_feedback),
		.CLKFBIN(sysclk_feedback),
		.LOCKED(sysclk_locked)
		// }}}
	);

	BUFG	sysbuf(     .I(s_clk_200mhz_unbuffered),.O(s_clk_200mhz));
	BUFG	clksync_buf(.I(s_clksync_unbuffered),   .O(s_clksync));
	BUFG	clk4x_buf(  .I(s_clk_400mhz_unbuffered),.O(s_clk_400mhz));

	// sysclk_stable
	// {{{
	initial	sysclk_stable = 0;
	always @(posedge i_clk_buffered, negedge sysclk_locked)
	if (!sysclk_locked)
		sysclk_stable <= 4'h0;
	else
		sysclk_stable <= { sysclk_stable[2:0], 1'b1 };
	// }}}

	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// PLL #2: 125MHz, 250MHz
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	//

	// The ethernet MAC requires a 125MHz clock
	//   We can't trust the RX 125MHz clock for this, since there's a
	//   possibility the RX 125MHz clock might arrive at a different rate.
	//   
	PLLE2_BASE #(
		// {{{
		.CLKFBOUT_MULT(10),
		.CLKFBOUT_PHASE(0.0),
		.CLKIN1_PERIOD(10),
		.CLKOUT0_DIVIDE(8),	// 125 MHz
		.CLKOUT0_PHASE(0),
		.CLKOUT1_DIVIDE(4),	// 250 MHz
		.CLKOUT1_PHASE(0)
		// }}}
	) gen_netclk(
		// {{{
		.CLKIN1(i_clk_buffered),
		.CLKOUT0(s_clk_125_unbuffered),
		.CLKOUT1(s_clk_250_unbuffered),
		.PWRDWN(1'b0), .RST(1'b0),
		.CLKFBOUT(netclk_feedback),
		.CLKFBIN(netclk_feedback),
		.LOCKED(netclk_locked)
		// }}}
	);

	BUFG	netbuf(.I(s_clk_125_unbuffered), .O(s_clk_125mhz));
	BUFG	netbf5(.I(s_clk_250_unbuffered), .O(s_clk_250mhz));

	assign	clocks_locked = (netclk_locked && sysclk_locked);

	// netclk_stable
	// {{{
	initial	netclk_stable = 0;
	always @(posedge i_clk_buffered, negedge netclk_locked)
	if (!netclk_locked)
		netclk_stable <= 4'h0;
	else
		netclk_stable <= { netclk_stable[2:0], 1'b1 };
	// }}}

	// upper_plls_stable
	// {{{
	initial	upper_plls_stable = 4'h0;
	always @(posedge i_clk_buffered)
		upper_plls_stable <= { upper_plls_stable[2:0],
			(netclk_stable[3] && sysclk_stable[3]) };
	// }}}

	// pre_reset_counter
	// {{{
	initial pre_reset_counter = -1;
	always @(posedge i_clk_buffered)
	if (upper_plls_stable[3:2] != 2'b11)
		pre_reset_counter <= -1;
	else if (pre_reset_counter > 0)
		pre_reset_counter <= pre_reset_counter - 1;
	// }}}

	// pre_reset
	// {{{
	initial	pre_reset = 1;
	always @(posedge i_clk_buffered)
	if ((upper_plls_stable[3:2] != 2'b11)
			||(!netclk_stable[3])||(!sysclk_stable[3]))
		pre_reset <= 1'b1;
	else if (pre_reset_counter == 0)
		pre_reset <= 1'b0;
	// }}}

	// }}}
@MAIN.PORTLIST=
		// Extra clocks
		i_clk_200mhz, i_clk_125mhz
@MAIN.IODECL=
	// Extra clocks
	// Verilator lint_off UNUSED
	input	wire		i_clk_200mhz, i_clk_125mhz; // i_clk_150mhz
	// Verilator lint_on  UNUSED
@MAIN.DEFNS=
	// Verilator lint_off UNUSED
	wire	i_net_tx_clk;
	// Verilator lint_on  UNUSED
@MAIN.INSERT=
	assign	i_net_tx_clk = i_clk_125mhz;
@CLOCK.WIRE=i_clk_200mhz i_clk_125mhz
@CLOCK.NAME=clk_200mhz clk_125mhz
@CLOCK.FREQUENCY=200000000 125000000
@CLOCK.TOP=
@MAIN.IODECL=
	input	wire		i_clk_200mhz, i_clk_125mhz;
