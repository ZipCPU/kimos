################################################################################
##
## Filename:	autodata/mem_bootrom_bkram.txt
## {{{
## Project:	KIMOS, a Mercury KX2 demonstration project
##
## Purpose:	Describes a memory model containing a bootable ROM, where
##		data can be stored in the on-chip RAM but nowhere else.
##	This will be used to create a board.ld linker script that can be
##	used to link ZipCPU first-stage boot-loader programs.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2024, Gisselquist Technology, LLC
## {{{
## This file is part of the KIMOS project.
##
## The KIMOS project is free software and gateware: you can redistribute it
## and/or modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation, either version 3 of the License,
## or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=mem_bootrom_bkram
@MASTER.TYPE=SCRIPT
@MASTER.BUS=wbwide
@LD.FILE=bootrom.ld
@LD.DEFNS=
/* LD.DEFNS from @$(PREFIX) */
_kram  = 0; /* No high-speed kernel RAM */
_ram   = ORIGIN(bkram);
_rom   = ORIGIN(bkrom);
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);

@LD.SCRIPT=
/* LD.SCRIPT from @$(PREFIX) */
SECTIONS
{
       .romcode ORIGIN(bkrom) : ALIGN(4) {
               _boot_address = .;
               _kram_start = .;
               _kram_end = .;
       		_ram_image_start = . ;
               *(.start) *(.boot)
               *(.kernel)
               *(.text.startup)
               *(.text*)
               *(.rodata*) *(.strings)
               }> bkrom
       .ramcode ORIGIN(bkram) : ALIGN(4) {
               *(.data) *(COMMON)
	} > bkram AT> bkrom
       _ram_image_end = . ;
       .bss : ALIGN_WITH_INPUT {
               *(.bss)
               _bss_image_end = . ;
               } > bkram
       _top_of_heap = .;
}
#
